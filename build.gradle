buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.kohsuke', name: 'github-api', version: '1.92'
    }
}

buildDir 'installed'
version '5.2'

repositories {
    jcenter()
    ivy {
        url 'http://mary.dfki.de/repo'
        layout 'maven'
    }
}

configurations.create 'marytts'
configurations.marytts.resolutionStrategy.eachDependency {
    if (it.requested.group == 'de.dfki.mary' && it.requested.name.startsWith('marytts-')) {
        it.useVersion version
    }
}

ext {
    voices = new groovy.json.JsonSlurper().parse(file('components.json'))
    selectedVoices = []
}

task list(group: 'Help', description: 'List all available voices') {
    doLast {
        def github
        if (System.env.GITHUB_API_TOKEN) {
            github = org.kohsuke.github.GitHub.connectUsingOAuth(System.env.GITHUB_API_TOKEN)
        } else {
            github = org.kohsuke.github.GitHub.connectAnonymously()
        }
        github.getOrganization('marytts').repositories.findAll { it.key.startsWith('voice-') }.each { repoName, repo ->
            logger.debug "$repo"
            def voice = [
                    name       : repoName,
                    description: repo.description,
                    license    : repo.license?.name,
                    url        : repo.html_url,
                    version    : repo.latestRelease?.name,
                    files      : repo.latestRelease?.assets?.collectEntries { asset ->
                        [(asset.name): [
                                size: asset.size,
                                url : asset.browserDownloadUrl
                        ]]
                    }
            ]
            logger.info new groovy.json.JsonBuilder(voice).toPrettyString()
            logger.lifecycle "$voice.name\t$voice.description"
        }
    }
}

task info(group: 'Help', description: "Display details") {
    doLast {
        selectedVoices.each { voice ->
            println "\nName\t$voice.name"
            println "Gender\t$voice.gender"
            println "Language\t$voice.language"
            println "Type\t$voice.type"
            println "Download size\t${voice.files.values().sum { it.size }}"
            println "License\t$voice.license.name, see $voice.license.url"
            println "Description\t$voice.description"
        }
    }
}

task payload(type: Copy) {
    from configurations.marytts
    into buildDir
    outputs.upToDateWhen { false }
    ext.files = [:]
    eachFile { source ->
        files[source.file] = source.name.endsWith('.zip') ?
                new java.util.zip.ZipFile(source.file).entries().collect {
                    new File(destinationDir, it.name)
                } : [new File(destinationDir, source.name)]
        source.exclude()
    }
}

task verify(group: 'Install') {
    description "Verify SHA-1 checksum of downloaded files for selected voices"
    dependsOn payload
    doLast {
        selectedVoices.each { voice ->
            payload.files.keySet().each {
                if (voice.files[it.name]) {
                    def expected = voice.files[it.name].sha1
                    def actual = it.parentFile.name.padLeft(40, '0')
                    logger.lifecycle "Verify\t$it.name"
                    assert expected == actual: "Checksum failed for $it.name"
                }
            }
        }
    }
}

task install(group: 'Install') {
    description "Install selected voices"
    dependsOn hasProperty('noverify') ? payload : verify
    doLast {
        payload.files.keySet().each { source ->
            if (source.name.endsWith('.zip')) {
                copy {
                    from zipTree(source)
                    into buildDir
                    eachFile {
                        def target = new File(buildDir, it.path)
                        if (!target.exists() || hasProperty('force')) {
                            logger.lifecycle "Unpack\t$it.name"
                        } else {
                            it.exclude()
                        }
                    }
                }
            } else {
                def target = new File(buildDir, source.name)
                if (!target.exists() || hasProperty('force')) {
                    logger.lifecycle "Copy\t$source.name"
                    copy {
                        from source
                        into buildDir
                    }
                }
            }
        }
    }
}

task uninstall(group: 'Uninstall') {
    description "Uninstall selected voices"
    dependsOn payload
    doLast {
        selectedVoices.each { voice ->
            payload.files.each { source, targets ->
                targets.each { target ->
                    if (target.isFile() && voice.files.containsKey(source.name)) {
                        logger.lifecycle "Delete\t$target.name"
                        delete target
                    }
                }
            }
        }
    }
}

task purge(group: 'Uninstall') {
    description "Remove the selected voice files from the download cache (experimental)"
    dependsOn payload
    doLast {
        selectedVoices.each { voice ->
            payload.files.keySet().each {
                if (voice.files.containsKey(it.name)) {
                    logger.lifecycle "Delete\t$it"
                    delete it
                }
            }
        }
    }
}

tasks.addRule("Pattern: <voice>") { taskName ->
    (taskName =~ /^voice-(.+)/).each { match, voiceName ->
        task(taskName) {
            def voice = voices.find { it.name == voiceName }
            if (voice) {
                selectedVoices << voice
                voice.files.keySet().each { name ->
                    def dependency = "$voice.group:$voice.artifact:$voice.version"
                    if (name.endsWith('.zip')) {
                        dependency += ":data@zip"
                    }
                    dependencies.add 'marytts', dependency
                }
            }
        }
    }
}

task server(type: JavaExec, group: 'Runtime', description: 'Start the MaryTTS server') {
    defaultTasks.add it.name
    if (!fileTree(buildDir).include('voice-*.jar').files) {
        dependsOn install, 'voice-cmu-slt-hsmm'
    }
    workingDir buildDir
    main 'marytts.server.Mary'
    systemProperties System.properties
    if (logger.isEnabled(LogLevel.INFO)) {
        systemProperties << ['log4j.logger.marytts': 'INFO,stderr']
    }
    if (logger.isEnabled(LogLevel.DEBUG)) {
        systemProperties << ['log4j.logger.marytts': 'DEBUG,stderr']
    }
    doFirst {
        def jarFiles = buildDir.exists() ? buildDir.listFiles() : null
        assert jarFiles: "No jar files found in \"$buildDir.name\" directory! Please install a MaryTTS voice first"
        classpath jarFiles
    }
}
