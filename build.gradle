buildDir 'installed'
allprojects {
    version '5.1.2'
}

subprojects {
    repositories {
        jcenter()
        maven {
            url 'https://oss.jfrog.org/artifactory/repo'
        }
        ivy {
            url 'http://mary.dfki.de/repo'
            layout 'maven'
        }
        ivy {
            url 'https://dl.dropboxusercontent.com/u/77978669/repo'
            layout 'maven'
        }
    }
}

new groovy.json.JsonSlurper().parse(file('components.json')).each { voice ->
    task(voice.name) {
        group 'Install'
        description voice.description
    }

    project(":$voice.name") {
        configurations.create 'marytts'

        voice.files.keySet().each { name ->
            def dependency = "$voice.group:$voice.artifact:$voice.version"
            if (name.endsWith('.zip')) {
                dependency += ":data@zip"
            }
            dependencies.marytts dependency
        }

        configurations.marytts.resolutionStrategy.eachDependency {
            if (it.requested.group == 'de.dfki.mary' && it.requested.name.startsWith('marytts-')) {
                it.useVersion version
            }
        }

        task payload(type: Copy) {
            from configurations.marytts
            into rootProject.buildDir
            outputs.upToDateWhen { false }
            ext.files = [:]
            eachFile { source ->
                files[source.file] = source.name.endsWith('.zip') ?
                        new java.util.zip.ZipFile(source.file).entries().collect {
                            new File(destinationDir, it.name)
                        } : [new File(destinationDir, source.name)]
                source.exclude()
            }
        }

        task verify {
            description "Verify SHA-1 checksum of downloaded files for $voice.name"
            dependsOn payload
            doLast {
                payload.files.keySet().each {
                    if (voice.files[it.name]) {
                        def expected = voice.files[it.name].sha1
                        def actual = it.parentFile.name.padLeft(40, '0')
                        logger.lifecycle "Verify\t$it.name"
                        assert expected == actual: "Checksum failed for $it.name"
                    }
                }
            }
        }

        task install(type: Copy) {
            description voice.description
            from configurations.marytts
            into rootProject.buildDir
            if (!(rootProject.properties['verify'] && !rootProject.verify.toBoolean())) {
                dependsOn verify
            }
            filesMatching '*.zip', { zip ->
                copy {
                    from zipTree(zip.file)
                    into rootProject.buildDir
                    eachFile { logger.lifecycle "Unpack\t$it.name" }
                }
                zip.exclude()
            }
            eachFile {
                if (file("$rootProject.buildDir/$it.name").exists()) {
                    it.exclude()
                } else {
                    logger.lifecycle "Copy\t$it.name"
                }
            }
            rootProject.tasks.getByName(voice.name).dependsOn it
        }

        task uninstall(dependsOn: payload, description: "Remove the files for $voice.name from \"$rootProject.buildDir.name\" directory") << {
            payload.files.each { source, targets ->
                targets.each { target ->
                    if (target.isFile() && voice.files.containsKey(source.name)) {
                        logger.lifecycle "Delete\t$target.name"
                        delete target
                    }
                }
            }
        }

        task purge(dependsOn: payload, description: "Remove the files for $voice.name from the download cache (experimental)") << {
            payload.files.keySet().each {
                if (voice.files.containsKey(it.name)) {
                    logger.lifecycle "Delete\t$it"
                    delete it
                }
            }
        }
    }
}

task server(type: JavaExec) {
    group 'Runtime'
    description 'Start the MaryTTS server'
    defaultTasks.add it.name
    def jarFiles = buildDir.exists() ? buildDir.listFiles() : null
    if (jarFiles) {
        classpath jarFiles
    }
    workingDir buildDir
    main 'marytts.server.Mary'
    systemProperties System.properties
    if (logger.isEnabled(LogLevel.INFO)) {
        systemProperties << ['log4j.logger.marytts': 'INFO,stderr']
    }
    if (logger.isEnabled(LogLevel.DEBUG)) {
        systemProperties << ['log4j.logger.marytts': 'DEBUG,stderr']
    }
    doFirst {
        assert jarFiles: "No jar files found in \"$buildDir.name\" directory! Please install a MaryTTS voice first"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion '2.2.1'
    scriptFile 'marytts'
    init.dependsOn it
}

apply plugin: 'distribution'

distributions.main {
    contents {
        from rootDir, { exclude file('.gitignore').canRead() ? file('.gitignore').readLines() : buildDir.name }
        from buildDir, {
            into buildDir.name
            exclude distsDir.name, 'install'
        }
        eachFile { logger.lifecycle "Pack\t$it.name" }
    }
}
